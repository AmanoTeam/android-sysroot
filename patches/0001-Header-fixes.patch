From c08b5cada41185f3a95d756af510c2099cc86484 Mon Sep 17 00:00:00 2001
From: Kartatz <105828205+Kartatz@users.noreply.github.com>
Date: Sun, 20 Jul 2025 15:16:24 -0300
Subject: [PATCH] Header fixes

---
 android/legacy_errno_inlines.h     |  2 +-
 android/legacy_fenv_inlines_arm.h  | 28 ++++++++++++++--------------
 android/legacy_fenv_inlines_mips.h | 28 ++++++++++++++--------------
 android/legacy_signal_inlines.h    | 16 ++++++++--------
 android/legacy_stdlib_inlines.h    | 20 ++++++++++----------
 android/legacy_strings_inlines.h   |  2 +-
 android/legacy_sys_mman_inlines.h  |  4 +---
 android/legacy_sys_stat_inlines.h  |  2 +-
 android/legacy_sys_wait_inlines.h  |  2 +-
 android/legacy_termios_inlines.h   |  2 +-
 langinfo.h                         |  3 +--
 sys/cdefs.h                        |  2 ++
 sys/mman.h                         | 14 +-------------
 13 files changed, 56 insertions(+), 69 deletions(-)

diff --git a/android/legacy_errno_inlines.h b/android/legacy_errno_inlines.h
index 9f116fa..f43f12a 100644
--- a/android/legacy_errno_inlines.h
+++ b/android/legacy_errno_inlines.h
@@ -37,7 +37,7 @@
 
 __BEGIN_DECLS
 
-static __inline int __attribute__((deprecated)) __set_errno(int n) {
+__extern_inline__ int __attribute__((deprecated)) __set_errno(int n) {
   errno = n;
   return -1;
 }
diff --git a/android/legacy_fenv_inlines_arm.h b/android/legacy_fenv_inlines_arm.h
index f5b2828..a1b928d 100644
--- a/android/legacy_fenv_inlines_arm.h
+++ b/android/legacy_fenv_inlines_arm.h
@@ -42,20 +42,20 @@ __BEGIN_DECLS
 
 #define FPSCR_RMODE_SHIFT 22
 
-static __inline int fegetenv(fenv_t* __envp) {
+__extern_inline__ int fegetenv(fenv_t* __envp) {
   fenv_t _fpscr;
   __asm__ __volatile__("vmrs %0,fpscr" : "=r" (_fpscr));
   *__envp = _fpscr;
   return 0;
 }
 
-static __inline int fesetenv(const fenv_t* __envp) {
+__extern_inline__ int fesetenv(const fenv_t* __envp) {
   fenv_t _fpscr = *__envp;
   __asm__ __volatile__("vmsr fpscr,%0" : :"ri" (_fpscr));
   return 0;
 }
 
-static __inline int feclearexcept(int __excepts) {
+__extern_inline__ int feclearexcept(int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   __fpscr &= ~__excepts;
@@ -63,14 +63,14 @@ static __inline int feclearexcept(int __excepts) {
   return 0;
 }
 
-static __inline int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   *__flagp = __fpscr & __excepts;
   return 0;
 }
 
-static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   __fpscr &= ~__excepts;
@@ -79,25 +79,25 @@ static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   return 0;
 }
 
-static __inline int feraiseexcept(int __excepts) {
+__extern_inline__ int feraiseexcept(int __excepts) {
   fexcept_t __ex = __excepts;
   fesetexceptflag(&__ex, __excepts);
   return 0;
 }
 
-static __inline int fetestexcept(int __excepts) {
+__extern_inline__ int fetestexcept(int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   return (__fpscr & __excepts);
 }
 
-static __inline int fegetround(void) {
+__extern_inline__ int fegetround(void) {
   fenv_t _fpscr;
   fegetenv(&_fpscr);
   return ((_fpscr >> FPSCR_RMODE_SHIFT) & 0x3);
 }
 
-static __inline int fesetround(int __round) {
+__extern_inline__ int fesetround(int __round) {
   fenv_t _fpscr;
   fegetenv(&_fpscr);
   _fpscr &= ~(0x3 << FPSCR_RMODE_SHIFT);
@@ -106,7 +106,7 @@ static __inline int fesetround(int __round) {
   return 0;
 }
 
-static __inline int feholdexcept(fenv_t* __envp) {
+__extern_inline__ int feholdexcept(fenv_t* __envp) {
   fenv_t __env;
   fegetenv(&__env);
   *__envp = __env;
@@ -115,7 +115,7 @@ static __inline int feholdexcept(fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feupdateenv(const fenv_t* __envp) {
+__extern_inline__ int feupdateenv(const fenv_t* __envp) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   fesetenv(__envp);
@@ -123,7 +123,7 @@ static __inline int feupdateenv(const fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feenableexcept(int __mask) {
+__extern_inline__ int feenableexcept(int __mask) {
   fenv_t __old_fpscr, __new_fpscr;
   fegetenv(&__old_fpscr);
   __new_fpscr = __old_fpscr | (__mask & FE_ALL_EXCEPT) << FPSCR_ENABLE_SHIFT;
@@ -131,7 +131,7 @@ static __inline int feenableexcept(int __mask) {
   return ((__old_fpscr >> FPSCR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fedisableexcept(int __mask) {
+__extern_inline__ int fedisableexcept(int __mask) {
   fenv_t __old_fpscr, __new_fpscr;
   fegetenv(&__old_fpscr);
   __new_fpscr = __old_fpscr & ~((__mask & FE_ALL_EXCEPT) << FPSCR_ENABLE_SHIFT);
@@ -139,7 +139,7 @@ static __inline int fedisableexcept(int __mask) {
   return ((__old_fpscr >> FPSCR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fegetexcept(void) {
+__extern_inline__ int fegetexcept(void) {
   fenv_t __fpscr;
   fegetenv(&__fpscr);
   return ((__fpscr & FPSCR_ENABLE_MASK) >> FPSCR_ENABLE_SHIFT);
diff --git a/android/legacy_fenv_inlines_mips.h b/android/legacy_fenv_inlines_mips.h
index 43ad360..296e16b 100644
--- a/android/legacy_fenv_inlines_mips.h
+++ b/android/legacy_fenv_inlines_mips.h
@@ -43,7 +43,7 @@ __BEGIN_DECLS
 
 #define FCSR_RMASK       0x3
 
-static __inline int fegetenv(fenv_t* __envp) {
+__extern_inline__ int fegetenv(fenv_t* __envp) {
   fenv_t _fcsr = 0;
 #ifdef  __mips_hard_float
   __asm__ __volatile__("cfc1 %0,$31" : "=r" (_fcsr));
@@ -52,7 +52,7 @@ static __inline int fegetenv(fenv_t* __envp) {
   return 0;
 }
 
-static __inline int fesetenv(const fenv_t* __envp) {
+__extern_inline__ int fesetenv(const fenv_t* __envp) {
   fenv_t _fcsr = *__envp;
 #ifdef  __mips_hard_float
   __asm__ __volatile__("ctc1 %0,$31" : : "r" (_fcsr));
@@ -60,7 +60,7 @@ static __inline int fesetenv(const fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feclearexcept(int __excepts) {
+__extern_inline__ int feclearexcept(int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   __excepts &= FE_ALL_EXCEPT;
@@ -69,14 +69,14 @@ static __inline int feclearexcept(int __excepts) {
   return 0;
 }
 
-static __inline int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   *__flagp = __fcsr & __excepts & FE_ALL_EXCEPT;
   return 0;
 }
 
-static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   /* Ensure that flags are all legal */
@@ -87,7 +87,7 @@ static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   return 0;
 }
 
-static __inline int feraiseexcept(int __excepts) {
+__extern_inline__ int feraiseexcept(int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   /* Ensure that flags are all legal */
@@ -98,19 +98,19 @@ static __inline int feraiseexcept(int __excepts) {
   return 0;
 }
 
-static __inline int fetestexcept(int __excepts) {
+__extern_inline__ int fetestexcept(int __excepts) {
   fexcept_t __FCSR;
   fegetenv(&__FCSR);
   return (__FCSR & __excepts & FE_ALL_EXCEPT);
 }
 
-static __inline int fegetround(void) {
+__extern_inline__ int fegetround(void) {
   fenv_t _fcsr;
   fegetenv(&_fcsr);
   return (_fcsr & FCSR_RMASK);
 }
 
-static __inline int fesetround(int __round) {
+__extern_inline__ int fesetround(int __round) {
   fenv_t _fcsr;
   fegetenv(&_fcsr);
   _fcsr &= ~FCSR_RMASK;
@@ -119,7 +119,7 @@ static __inline int fesetround(int __round) {
   return 0;
 }
 
-static __inline int feholdexcept(fenv_t* __envp) {
+__extern_inline__ int feholdexcept(fenv_t* __envp) {
   fenv_t __env;
   fegetenv(&__env);
   *__envp = __env;
@@ -128,7 +128,7 @@ static __inline int feholdexcept(fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feupdateenv(const fenv_t* __envp) {
+__extern_inline__ int feupdateenv(const fenv_t* __envp) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   fesetenv(__envp);
@@ -136,7 +136,7 @@ static __inline int feupdateenv(const fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feenableexcept(int __mask) {
+__extern_inline__ int feenableexcept(int __mask) {
   fenv_t __old_fcsr, __new_fcsr;
   fegetenv(&__old_fcsr);
   __new_fcsr = __old_fcsr | (__mask & FE_ALL_EXCEPT) << FCSR_ENABLE_SHIFT;
@@ -144,7 +144,7 @@ static __inline int feenableexcept(int __mask) {
   return ((__old_fcsr >> FCSR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fedisableexcept(int __mask) {
+__extern_inline__ int fedisableexcept(int __mask) {
   fenv_t __old_fcsr, __new_fcsr;
   fegetenv(&__old_fcsr);
   __new_fcsr = __old_fcsr & ~((__mask & FE_ALL_EXCEPT) << FCSR_ENABLE_SHIFT);
@@ -152,7 +152,7 @@ static __inline int fedisableexcept(int __mask) {
   return ((__old_fcsr >> FCSR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fegetexcept(void) {
+__extern_inline__ int fegetexcept(void) {
   fenv_t __fcsr;
   fegetenv(&__fcsr);
   return ((__fcsr & FCSR_ENABLE_MASK) >> FCSR_ENABLE_SHIFT);
diff --git a/android/legacy_signal_inlines.h b/android/legacy_signal_inlines.h
index 44c2f4f..371a4c6 100644
--- a/android/legacy_signal_inlines.h
+++ b/android/legacy_signal_inlines.h
@@ -45,12 +45,12 @@ sighandler_t bsd_signal(int __signal, sighandler_t __handler) __REMOVED_IN(21);
 int __libc_current_sigrtmax() __attribute__((__weak__)) __VERSIONER_NO_GUARD;
 int __libc_current_sigrtmin() __attribute__((__weak__)) __VERSIONER_NO_GUARD;
 
-static __inline int __ndk_legacy___libc_current_sigrtmax() {
+__extern_inline__ int __ndk_legacy___libc_current_sigrtmax() {
   if (__libc_current_sigrtmax) return __libc_current_sigrtmax();
   return __SIGRTMAX; /* Should match __libc_current_sigrtmax. */
 }
 
-static __inline int __ndk_legacy___libc_current_sigrtmin() {
+__extern_inline__ int __ndk_legacy___libc_current_sigrtmin() {
   if (__libc_current_sigrtmin) return __libc_current_sigrtmin();
   return __SIGRTMIN + 4; /* Should match __libc_current_sigrtmin. */
 }
@@ -60,7 +60,7 @@ static __inline int __ndk_legacy___libc_current_sigrtmin() {
 #undef SIGRTMIN
 #define SIGRTMIN __ndk_legacy___libc_current_sigrtmin()
 
-static __inline int sigismember(const sigset_t *set, int signum) {
+__extern_inline__ int sigismember(const sigset_t *set, int signum) {
   /* Signal numbers start at 1, but bit positions start at 0. */
   int bit = signum - 1;
   const unsigned long *local_set = (const unsigned long *)set;
@@ -71,7 +71,7 @@ static __inline int sigismember(const sigset_t *set, int signum) {
   return (int)((local_set[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1);
 }
 
-static __inline int sigaddset(sigset_t *set, int signum) {
+__extern_inline__ int sigaddset(sigset_t *set, int signum) {
   /* Signal numbers start at 1, but bit positions start at 0. */
   int bit = signum - 1;
   unsigned long *local_set = (unsigned long *)set;
@@ -83,7 +83,7 @@ static __inline int sigaddset(sigset_t *set, int signum) {
   return 0;
 }
 
-static __inline int sigdelset(sigset_t *set, int signum) {
+__extern_inline__ int sigdelset(sigset_t *set, int signum) {
   /* Signal numbers start at 1, but bit positions start at 0. */
   int bit = signum - 1;
   unsigned long *local_set = (unsigned long *)set;
@@ -95,7 +95,7 @@ static __inline int sigdelset(sigset_t *set, int signum) {
   return 0;
 }
 
-static __inline int sigemptyset(sigset_t *set) {
+__extern_inline__ int sigemptyset(sigset_t *set) {
   if (set == NULL) {
     errno = EINVAL;
     return -1;
@@ -104,7 +104,7 @@ static __inline int sigemptyset(sigset_t *set) {
   return 0;
 }
 
-static __inline int sigfillset(sigset_t *set) {
+__extern_inline__ int sigfillset(sigset_t *set) {
   if (set == NULL) {
     errno = EINVAL;
     return -1;
@@ -113,7 +113,7 @@ static __inline int sigfillset(sigset_t *set) {
   return 0;
 }
 
-static __inline sighandler_t signal(int s, sighandler_t f) {
+__extern_inline__ sighandler_t signal(int s, sighandler_t f) {
   return bsd_signal(s, f);
 }
 
diff --git a/android/legacy_stdlib_inlines.h b/android/legacy_stdlib_inlines.h
index 34a968c..81c20bf 100644
--- a/android/legacy_stdlib_inlines.h
+++ b/android/legacy_stdlib_inlines.h
@@ -39,7 +39,7 @@
 
 __BEGIN_DECLS
 
-static __inline float strtof(const char* nptr, char** endptr) {
+__extern_inline__ float strtof(const char* nptr, char** endptr) {
   double d = strtod(nptr, endptr);
   if (d > FLT_MAX) {
     errno = ERANGE;
@@ -51,25 +51,25 @@ static __inline float strtof(const char* nptr, char** endptr) {
   return __BIONIC_CAST(static_cast, float, d);
 }
 
-static __inline double atof(const char *nptr) { return (strtod(nptr, NULL)); }
+__extern_inline__ double atof(const char *nptr) { return (strtod(nptr, NULL)); }
 
-static __inline int abs(int __n) { return (__n < 0) ? -__n : __n; }
+__extern_inline__ int abs(int __n) { return (__n < 0) ? -__n : __n; }
 
-static __inline long labs(long __n) { return (__n < 0L) ? -__n : __n; }
+__extern_inline__ long labs(long __n) { return (__n < 0L) ? -__n : __n; }
 
-static __inline long long llabs(long long __n) {
+__extern_inline__ long long llabs(long long __n) {
   return (__n < 0LL) ? -__n : __n;
 }
 
-static __inline int rand(void) { return (int)lrand48(); }
+__extern_inline__ int rand(void) { return (int)lrand48(); }
 
-static __inline void srand(unsigned int __s) { srand48(__s); }
+__extern_inline__ void srand(unsigned int __s) { srand48(__s); }
 
-static __inline long random(void) { return lrand48(); }
+__extern_inline__ long random(void) { return lrand48(); }
 
-static __inline void srandom(unsigned int __s) { srand48(__s); }
+__extern_inline__ void srandom(unsigned int __s) { srand48(__s); }
 
-static __inline int grantpt(int __fd __attribute((unused))) {
+__extern_inline__ int grantpt(int __fd __attribute((unused))) {
   return 0; /* devpts does this all for us! */
 }
 
diff --git a/android/legacy_strings_inlines.h b/android/legacy_strings_inlines.h
index 5d63c5a..4bbfb16 100644
--- a/android/legacy_strings_inlines.h
+++ b/android/legacy_strings_inlines.h
@@ -38,7 +38,7 @@
 __BEGIN_DECLS
 
 /* Everyone except x86 had ffs since the beginning. */
-static __inline int ffs(int __n) { return __builtin_ffs(__n); }
+__extern_inline__ int ffs(int __n) { return __builtin_ffs(__n); }
 
 __END_DECLS
 
diff --git a/android/legacy_sys_mman_inlines.h b/android/legacy_sys_mman_inlines.h
index 160e6fe..f3f8da5 100644
--- a/android/legacy_sys_mman_inlines.h
+++ b/android/legacy_sys_mman_inlines.h
@@ -44,9 +44,7 @@ __BEGIN_DECLS
  * should allow a lot more code to build with _FILE_OFFSET_BITS=64 when
  * targeting pre-L.
  */
-static __inline void* mmap64(void* __addr, size_t __size, int __prot, int __flags, int __fd,
-                             off64_t __offset) __RENAME(mmap64);
-static __inline void* mmap64(void* __addr, size_t __size, int __prot, int __flags, int __fd,
+__extern_inline__ void* mmap64(void* __addr, size_t __size, int __prot, int __flags, int __fd,
                              off64_t __offset) {
   const int __mmap2_shift = 12; // 2**12 == 4096
   if (__offset < 0 || (__offset & ((1UL << __mmap2_shift) - 1)) != 0) {
diff --git a/android/legacy_sys_stat_inlines.h b/android/legacy_sys_stat_inlines.h
index 9521694..3490a87 100644
--- a/android/legacy_sys_stat_inlines.h
+++ b/android/legacy_sys_stat_inlines.h
@@ -37,7 +37,7 @@
 
 __BEGIN_DECLS
 
-static __inline int mkfifo(const char* __path, mode_t __mode) {
+__extern_inline__ int mkfifo(const char* __path, mode_t __mode) {
   return mknod(__path, (__mode & ~S_IFMT) | S_IFIFO, (dev_t)0);
 }
 
diff --git a/android/legacy_sys_wait_inlines.h b/android/legacy_sys_wait_inlines.h
index 4298d76..4b8c5e5 100644
--- a/android/legacy_sys_wait_inlines.h
+++ b/android/legacy_sys_wait_inlines.h
@@ -39,7 +39,7 @@
 
 __BEGIN_DECLS
 
-static __inline pid_t wait4(pid_t pid, int* status, int options, struct rusage* rusage) {
+__extern_inline__ pid_t wait4(pid_t pid, int* status, int options, struct rusage* rusage) {
   return __BIONIC_CAST(static_cast, pid_t, syscall(__NR_wait4, pid, status, options, rusage));
 }
 
diff --git a/android/legacy_termios_inlines.h b/android/legacy_termios_inlines.h
index a63dba1..09bd1ce 100644
--- a/android/legacy_termios_inlines.h
+++ b/android/legacy_termios_inlines.h
@@ -37,7 +37,7 @@
 #include <sys/ioctl.h>
 #include <sys/types.h>
 
-#define __BIONIC_TERMIOS_INLINE static __inline
+#define __BIONIC_TERMIOS_INLINE __extern_inline__
 #include <bits/termios_inlines.h>
 
 #endif
diff --git a/langinfo.h b/langinfo.h
index b0ecbf1..8252379 100644
--- a/langinfo.h
+++ b/langinfo.h
@@ -36,6 +36,7 @@
 
 __BEGIN_DECLS
 
+#if __ANDROID_API__ >= 26
 #define CODESET 1
 #define D_T_FMT 2
 #define D_FMT 3
@@ -92,8 +93,6 @@ __BEGIN_DECLS
 #define NOEXPR 54
 #define CRNCYSTR 55
 
-
-#if __ANDROID_API__ >= 26
 char* nl_langinfo(nl_item __item) __INTRODUCED_IN(26);
 char* nl_langinfo_l(nl_item __item, locale_t __l) __INTRODUCED_IN(26);
 #endif /* __ANDROID_API__ >= 26 */
diff --git a/sys/cdefs.h b/sys/cdefs.h
index 3656733..09a3567 100644
--- a/sys/cdefs.h
+++ b/sys/cdefs.h
@@ -380,4 +380,6 @@ int __size_mul_overflow(__SIZE_TYPE__ a, __SIZE_TYPE__ b, __SIZE_TYPE__ *result)
 #define __unsafe_check_mul_overflow(x, y) ((__SIZE_TYPE__)-1 / (x) < (y))
 #endif
 
+#define __extern_inline__ extern __inline__ __attribute__((__gnu_inline__))
+
 #endif /* !_SYS_CDEFS_H_ */
diff --git a/sys/mman.h b/sys/mman.h
index 5cc0775..cdfcc6d 100644
--- a/sys/mman.h
+++ b/sys/mman.h
@@ -48,20 +48,8 @@ __BEGIN_DECLS
 /*
  * mmap64 wasn't really around until L, but we added an inline for it since it
  * allows a lot more code to compile with _FILE_OFFSET_BITS=64.
- *
- * GCC removes the static inline unless it is explicitly used. We can get around
- * this with __attribute__((used)), but that needlessly adds a definition of
- * mmap64 to every translation unit that includes this header. Instead, just
- * preserve the old behavior for GCC and emit a useful diagnostic.
  */
-void* mmap(void* __addr, size_t __size, int __prot, int __flags, int __fd, off_t __offset)
-#if !defined(__clang__) && __ANDROID_API__ < __ANDROID_API_L__
-    __attribute__((error("mmap is not available with _FILE_OFFSET_BITS=64 when using GCC until "
-                         "android-21. Either raise your minSdkVersion, disable "
-                         "_FILE_OFFSET_BITS=64, or switch to Clang.")));
-#else
-    __RENAME(mmap64);
-#endif  /* defined(__clang__) */
+void* mmap(void* __addr, size_t __size, int __prot, int __flags, int __fd, off_t __offset) __RENAME(mmap64);
 #else
 void* mmap(void* __addr, size_t __size, int __prot, int __flags, int __fd, off_t __offset);
 #endif  /* defined(__USE_FILE_OFFSET64) */
-- 
2.49.0

