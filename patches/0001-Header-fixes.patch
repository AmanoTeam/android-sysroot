From 64383abd1e491ece5446108d9da7ab1465bf7ab1 Mon Sep 17 00:00:00 2001
From: Kartatz <105828205+Kartatz@users.noreply.github.com>
Date: Sun, 20 Jul 2025 15:16:24 -0300
Subject: [PATCH] Header fixes

---
 android/legacy_errno_inlines.h     |   2 +-
 android/legacy_fenv_inlines_arm.h  |  28 +--
 android/legacy_fenv_inlines_mips.h |  28 +--
 android/legacy_signal_inlines.h    |  16 +-
 android/legacy_stdlib_inlines.h    |  20 +-
 android/legacy_strings_inlines.h   |   2 +-
 android/legacy_sys_mman_inlines.h  |   4 +-
 android/legacy_sys_stat_inlines.h  |   2 +-
 android/legacy_sys_wait_inlines.h  |   2 +-
 android/legacy_termios_inlines.h   |   2 +-
 langinfo.h                         |   3 +-
 locale.h                           |   4 +-
 math.h                             | 303 ++++++++++++++++++++---------
 string.h                           |   7 +
 sys/cdefs.h                        |   3 +
 sys/mman.h                         |  14 +-
 sys/types.h                        |   1 +
 17 files changed, 272 insertions(+), 169 deletions(-)

diff --git a/android/legacy_errno_inlines.h b/android/legacy_errno_inlines.h
index 9f116fa..f43f12a 100644
--- a/android/legacy_errno_inlines.h
+++ b/android/legacy_errno_inlines.h
@@ -37,7 +37,7 @@
 
 __BEGIN_DECLS
 
-static __inline int __attribute__((deprecated)) __set_errno(int n) {
+__extern_inline__ int __attribute__((deprecated)) __set_errno(int n) {
   errno = n;
   return -1;
 }
diff --git a/android/legacy_fenv_inlines_arm.h b/android/legacy_fenv_inlines_arm.h
index f5b2828..a1b928d 100644
--- a/android/legacy_fenv_inlines_arm.h
+++ b/android/legacy_fenv_inlines_arm.h
@@ -42,20 +42,20 @@ __BEGIN_DECLS
 
 #define FPSCR_RMODE_SHIFT 22
 
-static __inline int fegetenv(fenv_t* __envp) {
+__extern_inline__ int fegetenv(fenv_t* __envp) {
   fenv_t _fpscr;
   __asm__ __volatile__("vmrs %0,fpscr" : "=r" (_fpscr));
   *__envp = _fpscr;
   return 0;
 }
 
-static __inline int fesetenv(const fenv_t* __envp) {
+__extern_inline__ int fesetenv(const fenv_t* __envp) {
   fenv_t _fpscr = *__envp;
   __asm__ __volatile__("vmsr fpscr,%0" : :"ri" (_fpscr));
   return 0;
 }
 
-static __inline int feclearexcept(int __excepts) {
+__extern_inline__ int feclearexcept(int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   __fpscr &= ~__excepts;
@@ -63,14 +63,14 @@ static __inline int feclearexcept(int __excepts) {
   return 0;
 }
 
-static __inline int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   *__flagp = __fpscr & __excepts;
   return 0;
 }
 
-static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   __fpscr &= ~__excepts;
@@ -79,25 +79,25 @@ static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   return 0;
 }
 
-static __inline int feraiseexcept(int __excepts) {
+__extern_inline__ int feraiseexcept(int __excepts) {
   fexcept_t __ex = __excepts;
   fesetexceptflag(&__ex, __excepts);
   return 0;
 }
 
-static __inline int fetestexcept(int __excepts) {
+__extern_inline__ int fetestexcept(int __excepts) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   return (__fpscr & __excepts);
 }
 
-static __inline int fegetround(void) {
+__extern_inline__ int fegetround(void) {
   fenv_t _fpscr;
   fegetenv(&_fpscr);
   return ((_fpscr >> FPSCR_RMODE_SHIFT) & 0x3);
 }
 
-static __inline int fesetround(int __round) {
+__extern_inline__ int fesetround(int __round) {
   fenv_t _fpscr;
   fegetenv(&_fpscr);
   _fpscr &= ~(0x3 << FPSCR_RMODE_SHIFT);
@@ -106,7 +106,7 @@ static __inline int fesetround(int __round) {
   return 0;
 }
 
-static __inline int feholdexcept(fenv_t* __envp) {
+__extern_inline__ int feholdexcept(fenv_t* __envp) {
   fenv_t __env;
   fegetenv(&__env);
   *__envp = __env;
@@ -115,7 +115,7 @@ static __inline int feholdexcept(fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feupdateenv(const fenv_t* __envp) {
+__extern_inline__ int feupdateenv(const fenv_t* __envp) {
   fexcept_t __fpscr;
   fegetenv(&__fpscr);
   fesetenv(__envp);
@@ -123,7 +123,7 @@ static __inline int feupdateenv(const fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feenableexcept(int __mask) {
+__extern_inline__ int feenableexcept(int __mask) {
   fenv_t __old_fpscr, __new_fpscr;
   fegetenv(&__old_fpscr);
   __new_fpscr = __old_fpscr | (__mask & FE_ALL_EXCEPT) << FPSCR_ENABLE_SHIFT;
@@ -131,7 +131,7 @@ static __inline int feenableexcept(int __mask) {
   return ((__old_fpscr >> FPSCR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fedisableexcept(int __mask) {
+__extern_inline__ int fedisableexcept(int __mask) {
   fenv_t __old_fpscr, __new_fpscr;
   fegetenv(&__old_fpscr);
   __new_fpscr = __old_fpscr & ~((__mask & FE_ALL_EXCEPT) << FPSCR_ENABLE_SHIFT);
@@ -139,7 +139,7 @@ static __inline int fedisableexcept(int __mask) {
   return ((__old_fpscr >> FPSCR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fegetexcept(void) {
+__extern_inline__ int fegetexcept(void) {
   fenv_t __fpscr;
   fegetenv(&__fpscr);
   return ((__fpscr & FPSCR_ENABLE_MASK) >> FPSCR_ENABLE_SHIFT);
diff --git a/android/legacy_fenv_inlines_mips.h b/android/legacy_fenv_inlines_mips.h
index 43ad360..296e16b 100644
--- a/android/legacy_fenv_inlines_mips.h
+++ b/android/legacy_fenv_inlines_mips.h
@@ -43,7 +43,7 @@ __BEGIN_DECLS
 
 #define FCSR_RMASK       0x3
 
-static __inline int fegetenv(fenv_t* __envp) {
+__extern_inline__ int fegetenv(fenv_t* __envp) {
   fenv_t _fcsr = 0;
 #ifdef  __mips_hard_float
   __asm__ __volatile__("cfc1 %0,$31" : "=r" (_fcsr));
@@ -52,7 +52,7 @@ static __inline int fegetenv(fenv_t* __envp) {
   return 0;
 }
 
-static __inline int fesetenv(const fenv_t* __envp) {
+__extern_inline__ int fesetenv(const fenv_t* __envp) {
   fenv_t _fcsr = *__envp;
 #ifdef  __mips_hard_float
   __asm__ __volatile__("ctc1 %0,$31" : : "r" (_fcsr));
@@ -60,7 +60,7 @@ static __inline int fesetenv(const fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feclearexcept(int __excepts) {
+__extern_inline__ int feclearexcept(int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   __excepts &= FE_ALL_EXCEPT;
@@ -69,14 +69,14 @@ static __inline int feclearexcept(int __excepts) {
   return 0;
 }
 
-static __inline int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fegetexceptflag(fexcept_t* __flagp, int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   *__flagp = __fcsr & __excepts & FE_ALL_EXCEPT;
   return 0;
 }
 
-static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
+__extern_inline__ int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   /* Ensure that flags are all legal */
@@ -87,7 +87,7 @@ static __inline int fesetexceptflag(const fexcept_t* __flagp, int __excepts) {
   return 0;
 }
 
-static __inline int feraiseexcept(int __excepts) {
+__extern_inline__ int feraiseexcept(int __excepts) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   /* Ensure that flags are all legal */
@@ -98,19 +98,19 @@ static __inline int feraiseexcept(int __excepts) {
   return 0;
 }
 
-static __inline int fetestexcept(int __excepts) {
+__extern_inline__ int fetestexcept(int __excepts) {
   fexcept_t __FCSR;
   fegetenv(&__FCSR);
   return (__FCSR & __excepts & FE_ALL_EXCEPT);
 }
 
-static __inline int fegetround(void) {
+__extern_inline__ int fegetround(void) {
   fenv_t _fcsr;
   fegetenv(&_fcsr);
   return (_fcsr & FCSR_RMASK);
 }
 
-static __inline int fesetround(int __round) {
+__extern_inline__ int fesetround(int __round) {
   fenv_t _fcsr;
   fegetenv(&_fcsr);
   _fcsr &= ~FCSR_RMASK;
@@ -119,7 +119,7 @@ static __inline int fesetround(int __round) {
   return 0;
 }
 
-static __inline int feholdexcept(fenv_t* __envp) {
+__extern_inline__ int feholdexcept(fenv_t* __envp) {
   fenv_t __env;
   fegetenv(&__env);
   *__envp = __env;
@@ -128,7 +128,7 @@ static __inline int feholdexcept(fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feupdateenv(const fenv_t* __envp) {
+__extern_inline__ int feupdateenv(const fenv_t* __envp) {
   fexcept_t __fcsr;
   fegetenv(&__fcsr);
   fesetenv(__envp);
@@ -136,7 +136,7 @@ static __inline int feupdateenv(const fenv_t* __envp) {
   return 0;
 }
 
-static __inline int feenableexcept(int __mask) {
+__extern_inline__ int feenableexcept(int __mask) {
   fenv_t __old_fcsr, __new_fcsr;
   fegetenv(&__old_fcsr);
   __new_fcsr = __old_fcsr | (__mask & FE_ALL_EXCEPT) << FCSR_ENABLE_SHIFT;
@@ -144,7 +144,7 @@ static __inline int feenableexcept(int __mask) {
   return ((__old_fcsr >> FCSR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fedisableexcept(int __mask) {
+__extern_inline__ int fedisableexcept(int __mask) {
   fenv_t __old_fcsr, __new_fcsr;
   fegetenv(&__old_fcsr);
   __new_fcsr = __old_fcsr & ~((__mask & FE_ALL_EXCEPT) << FCSR_ENABLE_SHIFT);
@@ -152,7 +152,7 @@ static __inline int fedisableexcept(int __mask) {
   return ((__old_fcsr >> FCSR_ENABLE_SHIFT) & FE_ALL_EXCEPT);
 }
 
-static __inline int fegetexcept(void) {
+__extern_inline__ int fegetexcept(void) {
   fenv_t __fcsr;
   fegetenv(&__fcsr);
   return ((__fcsr & FCSR_ENABLE_MASK) >> FCSR_ENABLE_SHIFT);
diff --git a/android/legacy_signal_inlines.h b/android/legacy_signal_inlines.h
index 44c2f4f..371a4c6 100644
--- a/android/legacy_signal_inlines.h
+++ b/android/legacy_signal_inlines.h
@@ -45,12 +45,12 @@ sighandler_t bsd_signal(int __signal, sighandler_t __handler) __REMOVED_IN(21);
 int __libc_current_sigrtmax() __attribute__((__weak__)) __VERSIONER_NO_GUARD;
 int __libc_current_sigrtmin() __attribute__((__weak__)) __VERSIONER_NO_GUARD;
 
-static __inline int __ndk_legacy___libc_current_sigrtmax() {
+__extern_inline__ int __ndk_legacy___libc_current_sigrtmax() {
   if (__libc_current_sigrtmax) return __libc_current_sigrtmax();
   return __SIGRTMAX; /* Should match __libc_current_sigrtmax. */
 }
 
-static __inline int __ndk_legacy___libc_current_sigrtmin() {
+__extern_inline__ int __ndk_legacy___libc_current_sigrtmin() {
   if (__libc_current_sigrtmin) return __libc_current_sigrtmin();
   return __SIGRTMIN + 4; /* Should match __libc_current_sigrtmin. */
 }
@@ -60,7 +60,7 @@ static __inline int __ndk_legacy___libc_current_sigrtmin() {
 #undef SIGRTMIN
 #define SIGRTMIN __ndk_legacy___libc_current_sigrtmin()
 
-static __inline int sigismember(const sigset_t *set, int signum) {
+__extern_inline__ int sigismember(const sigset_t *set, int signum) {
   /* Signal numbers start at 1, but bit positions start at 0. */
   int bit = signum - 1;
   const unsigned long *local_set = (const unsigned long *)set;
@@ -71,7 +71,7 @@ static __inline int sigismember(const sigset_t *set, int signum) {
   return (int)((local_set[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1);
 }
 
-static __inline int sigaddset(sigset_t *set, int signum) {
+__extern_inline__ int sigaddset(sigset_t *set, int signum) {
   /* Signal numbers start at 1, but bit positions start at 0. */
   int bit = signum - 1;
   unsigned long *local_set = (unsigned long *)set;
@@ -83,7 +83,7 @@ static __inline int sigaddset(sigset_t *set, int signum) {
   return 0;
 }
 
-static __inline int sigdelset(sigset_t *set, int signum) {
+__extern_inline__ int sigdelset(sigset_t *set, int signum) {
   /* Signal numbers start at 1, but bit positions start at 0. */
   int bit = signum - 1;
   unsigned long *local_set = (unsigned long *)set;
@@ -95,7 +95,7 @@ static __inline int sigdelset(sigset_t *set, int signum) {
   return 0;
 }
 
-static __inline int sigemptyset(sigset_t *set) {
+__extern_inline__ int sigemptyset(sigset_t *set) {
   if (set == NULL) {
     errno = EINVAL;
     return -1;
@@ -104,7 +104,7 @@ static __inline int sigemptyset(sigset_t *set) {
   return 0;
 }
 
-static __inline int sigfillset(sigset_t *set) {
+__extern_inline__ int sigfillset(sigset_t *set) {
   if (set == NULL) {
     errno = EINVAL;
     return -1;
@@ -113,7 +113,7 @@ static __inline int sigfillset(sigset_t *set) {
   return 0;
 }
 
-static __inline sighandler_t signal(int s, sighandler_t f) {
+__extern_inline__ sighandler_t signal(int s, sighandler_t f) {
   return bsd_signal(s, f);
 }
 
diff --git a/android/legacy_stdlib_inlines.h b/android/legacy_stdlib_inlines.h
index 34a968c..81c20bf 100644
--- a/android/legacy_stdlib_inlines.h
+++ b/android/legacy_stdlib_inlines.h
@@ -39,7 +39,7 @@
 
 __BEGIN_DECLS
 
-static __inline float strtof(const char* nptr, char** endptr) {
+__extern_inline__ float strtof(const char* nptr, char** endptr) {
   double d = strtod(nptr, endptr);
   if (d > FLT_MAX) {
     errno = ERANGE;
@@ -51,25 +51,25 @@ static __inline float strtof(const char* nptr, char** endptr) {
   return __BIONIC_CAST(static_cast, float, d);
 }
 
-static __inline double atof(const char *nptr) { return (strtod(nptr, NULL)); }
+__extern_inline__ double atof(const char *nptr) { return (strtod(nptr, NULL)); }
 
-static __inline int abs(int __n) { return (__n < 0) ? -__n : __n; }
+__extern_inline__ int abs(int __n) { return (__n < 0) ? -__n : __n; }
 
-static __inline long labs(long __n) { return (__n < 0L) ? -__n : __n; }
+__extern_inline__ long labs(long __n) { return (__n < 0L) ? -__n : __n; }
 
-static __inline long long llabs(long long __n) {
+__extern_inline__ long long llabs(long long __n) {
   return (__n < 0LL) ? -__n : __n;
 }
 
-static __inline int rand(void) { return (int)lrand48(); }
+__extern_inline__ int rand(void) { return (int)lrand48(); }
 
-static __inline void srand(unsigned int __s) { srand48(__s); }
+__extern_inline__ void srand(unsigned int __s) { srand48(__s); }
 
-static __inline long random(void) { return lrand48(); }
+__extern_inline__ long random(void) { return lrand48(); }
 
-static __inline void srandom(unsigned int __s) { srand48(__s); }
+__extern_inline__ void srandom(unsigned int __s) { srand48(__s); }
 
-static __inline int grantpt(int __fd __attribute((unused))) {
+__extern_inline__ int grantpt(int __fd __attribute((unused))) {
   return 0; /* devpts does this all for us! */
 }
 
diff --git a/android/legacy_strings_inlines.h b/android/legacy_strings_inlines.h
index 5d63c5a..4bbfb16 100644
--- a/android/legacy_strings_inlines.h
+++ b/android/legacy_strings_inlines.h
@@ -38,7 +38,7 @@
 __BEGIN_DECLS
 
 /* Everyone except x86 had ffs since the beginning. */
-static __inline int ffs(int __n) { return __builtin_ffs(__n); }
+__extern_inline__ int ffs(int __n) { return __builtin_ffs(__n); }
 
 __END_DECLS
 
diff --git a/android/legacy_sys_mman_inlines.h b/android/legacy_sys_mman_inlines.h
index 160e6fe..7846d9e 100644
--- a/android/legacy_sys_mman_inlines.h
+++ b/android/legacy_sys_mman_inlines.h
@@ -44,9 +44,7 @@ __BEGIN_DECLS
  * should allow a lot more code to build with _FILE_OFFSET_BITS=64 when
  * targeting pre-L.
  */
-static __inline void* mmap64(void* __addr, size_t __size, int __prot, int __flags, int __fd,
-                             off64_t __offset) __RENAME(mmap64);
-static __inline void* mmap64(void* __addr, size_t __size, int __prot, int __flags, int __fd,
+__extern_always_inline__ void* mmap64(void* __addr, size_t __size, int __prot, int __flags, int __fd,
                              off64_t __offset) {
   const int __mmap2_shift = 12; // 2**12 == 4096
   if (__offset < 0 || (__offset & ((1UL << __mmap2_shift) - 1)) != 0) {
diff --git a/android/legacy_sys_stat_inlines.h b/android/legacy_sys_stat_inlines.h
index 9521694..3490a87 100644
--- a/android/legacy_sys_stat_inlines.h
+++ b/android/legacy_sys_stat_inlines.h
@@ -37,7 +37,7 @@
 
 __BEGIN_DECLS
 
-static __inline int mkfifo(const char* __path, mode_t __mode) {
+__extern_inline__ int mkfifo(const char* __path, mode_t __mode) {
   return mknod(__path, (__mode & ~S_IFMT) | S_IFIFO, (dev_t)0);
 }
 
diff --git a/android/legacy_sys_wait_inlines.h b/android/legacy_sys_wait_inlines.h
index 4298d76..4b8c5e5 100644
--- a/android/legacy_sys_wait_inlines.h
+++ b/android/legacy_sys_wait_inlines.h
@@ -39,7 +39,7 @@
 
 __BEGIN_DECLS
 
-static __inline pid_t wait4(pid_t pid, int* status, int options, struct rusage* rusage) {
+__extern_inline__ pid_t wait4(pid_t pid, int* status, int options, struct rusage* rusage) {
   return __BIONIC_CAST(static_cast, pid_t, syscall(__NR_wait4, pid, status, options, rusage));
 }
 
diff --git a/android/legacy_termios_inlines.h b/android/legacy_termios_inlines.h
index a63dba1..09bd1ce 100644
--- a/android/legacy_termios_inlines.h
+++ b/android/legacy_termios_inlines.h
@@ -37,7 +37,7 @@
 #include <sys/ioctl.h>
 #include <sys/types.h>
 
-#define __BIONIC_TERMIOS_INLINE static __inline
+#define __BIONIC_TERMIOS_INLINE __extern_inline__
 #include <bits/termios_inlines.h>
 
 #endif
diff --git a/langinfo.h b/langinfo.h
index b0ecbf1..8252379 100644
--- a/langinfo.h
+++ b/langinfo.h
@@ -36,6 +36,7 @@
 
 __BEGIN_DECLS
 
+#if __ANDROID_API__ >= 26
 #define CODESET 1
 #define D_T_FMT 2
 #define D_FMT 3
@@ -92,8 +93,6 @@ __BEGIN_DECLS
 #define NOEXPR 54
 #define CRNCYSTR 55
 
-
-#if __ANDROID_API__ >= 26
 char* nl_langinfo(nl_item __item) __INTRODUCED_IN(26);
 char* nl_langinfo_l(nl_item __item, locale_t __l) __INTRODUCED_IN(26);
 #endif /* __ANDROID_API__ >= 26 */
diff --git a/locale.h b/locale.h
index 451f522..71fa2cd 100644
--- a/locale.h
+++ b/locale.h
@@ -96,10 +96,8 @@ struct lconv {
   char int_n_sign_posn;
 };
 
-struct lconv* localeconv(void) __INTRODUCED_IN(21) __VERSIONER_NO_GUARD;
-
-
 #if __ANDROID_API__ >= 21
+struct lconv* localeconv(void) __INTRODUCED_IN(21) __VERSIONER_NO_GUARD;
 locale_t duplocale(locale_t __l) __INTRODUCED_IN(21);
 void freelocale(locale_t __l) __INTRODUCED_IN(21);
 locale_t newlocale(int __category_mask, const char* __locale_name, locale_t __base) __INTRODUCED_IN(21);
diff --git a/math.h b/math.h
index a1bb531..ca9d79b 100644
--- a/math.h
+++ b/math.h
@@ -77,248 +77,358 @@ typedef __float_t float_t;
 
 double acos(double __x);
 float acosf(float __x);
-long double acosl(long double __x) __RENAME_LDBL(acos, 3, 21);
+__extern_inline__ long double acosl(long double __x) {
+     return __builtin_acosl(__x);
+}
 
 double asin(double __x);
 float asinf(float __x);
-long double asinl(long double __x) __RENAME_LDBL(asin, 3, 21);
+__extern_inline__ long double asinl(long double __x) {
+     return __builtin_asinl(__x);
+}
 
 double atan(double __x);
 float atanf(float __x);
-long double atanl(long double __x) __RENAME_LDBL(atan, 3, 21);
+__extern_inline__ long double atanl(long double __x) {
+     return __builtin_atanl(__x);
+}
 
 double atan2(double __y, double __x);
 float atan2f(float __y, float __x);
-long double atan2l(long double __y, long double __x) __RENAME_LDBL(atan2, 3, 21);
+__extern_inline__ long double atan2l(long double __y, long double __x) {
+     return __builtin_atan2l(__y, __x);
+}
 
 double cos(double __x);
 float cosf(float __x);
-long double cosl(long double __x) __RENAME_LDBL(cos, 3, 21);
+__extern_inline__ long double cosl(long double __x) {
+     return __builtin_cosl(__x);
+}
 
 double sin(double __x);
 float sinf(float __x);
-long double sinl(long double __x) __RENAME_LDBL(sin, 3, 21);
+__extern_inline__ long double sinl(long double __x) {
+     return __builtin_sinl(__x);
+}
 
 double tan(double __x);
 float tanf(float __x);
-long double tanl(long double __x) __RENAME_LDBL(tan, 3, 21);
+__extern_inline__ long double tanl(long double __x) {
+     return __builtin_tanl(__x);
+}
 
 double acosh(double __x);
 float acoshf(float __x);
-long double acoshl(long double __x) __RENAME_LDBL(acosh, 3, 21);
+__extern_inline__ long double acoshl(long double __x) {
+     return __builtin_acoshl(__x);
+}
 
 double asinh(double __x);
 float asinhf(float __x);
-long double asinhl(long double __x) __RENAME_LDBL(asinh, 3, 21);
+__extern_inline__ long double asinhl(long double __x) {
+     return __builtin_asinhl(__x);
+}
 
 double atanh(double __x);
 float atanhf(float __x);
-long double atanhl(long double __x) __RENAME_LDBL(atanh, 3, 21);
+__extern_inline__ long double atanhl(long double __x) {
+     return __builtin_atanhl(__x);
+}
 
 double cosh(double __x);
 float coshf(float __x);
-long double coshl(long double __x) __RENAME_LDBL(cosh, 3, 21);
+__extern_inline__ long double coshl(long double __x) {
+     return __builtin_coshl(__x);
+}
 
 double sinh(double __x);
 float sinhf(float __x);
-long double sinhl(long double __x) __RENAME_LDBL(sinh, 3, 21);
+__extern_inline__ long double sinhl(long double __x) {
+     return __builtin_sinhl(__x);
+}
 
 double tanh(double __x);
 float tanhf(float __x);
-long double tanhl(long double __x) __RENAME_LDBL(tanh, 3, 21);
+__extern_inline__ long double tanhl(long double __x) {
+     return __builtin_tanhl(__x);
+}
 
 double exp(double __x);
 float expf(float __x);
-long double expl(long double __x) __RENAME_LDBL(exp, 3, 21);
+__extern_inline__ long double expl(long double __x) {
+     return __builtin_expl(__x);
+}
 
 double exp2(double __x);
 float exp2f(float __x);
-long double exp2l(long double __x) __RENAME_LDBL(exp2, 3, 21);
+__extern_inline__ long double exp2l(long double __x) {
+     return __builtin_exp2l(__x);
+}
 
 double expm1(double __x);
 float expm1f(float __x);
-long double expm1l(long double __x) __RENAME_LDBL(expm1, 3, 21);
+__extern_inline__ long double expm1l(long double __x) {
+     return __builtin_expm1l(__x);
+}
 
 double frexp(double __x, int* __exponent);
 float frexpf(float __x, int* __exponent);
-long double frexpl(long double __x, int* __exponent) __RENAME_LDBL(frexp, 3, 21);
+__extern_inline__ long double frexpl(long double __x, int* __exponent) {
+     return __builtin_frexpl(__x, __exponent);
+}
 
 int ilogb(double __x) __attribute_const__;
 int ilogbf(float __x) __attribute_const__;
-int ilogbl(long double __x) __RENAME_LDBL(ilogb, 3, 3) __attribute_const__;
+__extern_inline__ int ilogbl(long double __x) {
+     return __builtin_ilogbl(__x);
+}
 
 double ldexp(double __x, int __exponent);
 float ldexpf(float __x, int __exponent);
-long double ldexpl(long double __x, int __exponent) __RENAME_LDBL(ldexp, 3, 3);
+__extern_inline__ long double ldexpl(long double __x, int __exponent) {
+     return __builtin_ldexpl(__x, __exponent);
+}
 
 double log(double __x);
 float logf(float __x);
-long double logl(long double __x) __RENAME_LDBL(log, 3, 21);
+__extern_inline__ long double logl(long double __x) {
+     return __builtin_logl(__x);
+}
 
 double log10(double __x);
 float log10f(float __x);
-long double log10l(long double __x) __RENAME_LDBL(log10, 3, 21);
+__extern_inline__ long double log10l(long double __x) {
+     return __builtin_log10l(__x);
+}
 
 double log1p(double __x);
 float log1pf(float __x);
-long double log1pl(long double __x) __RENAME_LDBL(log1p, 3, 21);
-
-
-#if __ANDROID_API__ >= 18
-double log2(double __x) __INTRODUCED_IN(18);
-float log2f(float __x) __INTRODUCED_IN(18);
-long double log2l(long double __x) __RENAME_LDBL(log2, 18, 18);
-#endif /* __ANDROID_API__ >= 18 */
-
+__extern_inline__ long double log1pl(long double __x) {
+     return __builtin_log1pl(__x);
+}
+
+__extern_inline__ double log2(double __x) {
+     return __builtin_log2(__x);
+}
+__extern_inline__ float log2f(float __x) {
+     return __builtin_log2f(__x);
+}
+__extern_inline__ long double log2l(long double __x) {
+     return __builtin_log2l(__x);
+}
 
 double logb(double __x);
 float logbf(float __x);
-long double logbl(long double __x) __RENAME_LDBL(logb, 3, 18);
+__extern_inline__ long double logbl(long double __x) {
+     return __builtin_logbl(__x);
+}
 
 double modf(double __x, double* __integral_part);
 float modff(float __x, float* __integral_part);
-long double modfl(long double __x, long double* __integral_part) __RENAME_LDBL(modf, 3, 21);
+__extern_inline__ long double modfl(long double __x, long double* __integral_part) {
+     return __builtin_modfl(__x, __integral_part);
+}
 
 double scalbn(double __x, int __exponent);
 float scalbnf(float __x, int __exponent);
-long double scalbnl(long double __x, int __exponent) __RENAME_LDBL(scalbn, 3, 3);
-
-/* TODO: once the NDK only supports >= 18, use __RENAME_LDBL here too. */
-double scalbln(double __x, long __exponent) __INTRODUCED_IN_X86(18) __VERSIONER_NO_GUARD;
-float scalblnf(float __x, long __exponent) __INTRODUCED_IN_X86(18) __VERSIONER_NO_GUARD;
-long double scalblnl(long double __x, long __exponent) __INTRODUCED_IN_X86(18) __VERSIONER_NO_GUARD;
+__extern_inline__ long double scalbnl(long double __x, int __exponent) {
+     return __builtin_scalbnl(__x, __exponent);
+}
+__extern_inline__ double scalbln(double __x, long __exponent) {
+     return __builtin_scalbln(__x, __exponent);
+}
+__extern_inline__ float scalblnf(float __x, long __exponent) {
+     return __builtin_scalblnf(__x, __exponent);
+}
+__extern_inline__ long double scalblnl(long double __x, long __exponent) {
+     return __builtin_scalblnl(__x, __exponent);
+}
 
 double cbrt(double __x);
 float cbrtf(float __x);
-long double cbrtl(long double __x) __RENAME_LDBL(cbrt, 3, 21);
+__extern_inline__ long double cbrtl(long double __x) {
+     return __builtin_cbrtl(__x);
+}
 
 double fabs(double __x) __attribute_const__;
 float fabsf(float __x) __attribute_const__;
-long double fabsl(long double __x) __RENAME_LDBL(fabs, 3, 3) __attribute_const__;
+__extern_inline__ long double fabsl(long double __x) {
+     return __builtin_fabsl(__x);
+}
 
 double hypot(double __x, double __y);
 float hypotf(float __x, float __y);
-long double hypotl(long double __x, long double __y) __RENAME_LDBL(hypot, 3, 21);
+__extern_inline__ long double hypotl(long double __x, long double __y) {
+     return __builtin_hypotl(__x, __y);
+}
 
 double pow(double __x, double __y);
 float powf(float __x, float __y);
-long double powl(long double __x, long double __y) __RENAME_LDBL(pow, 3, 21);
+__extern_inline__ long double powl(long double __x, long double __y) {
+     return __builtin_powl(__x, __y);
+}
 
 double sqrt(double __x);
 float sqrtf(float __x);
-long double sqrtl(long double __x) __RENAME_LDBL(sqrt, 3, 21);
+__extern_inline__ long double sqrtl(long double __x) {
+     return __builtin_sqrtl(__x);
+}
 
 double erf(double __x);
 float erff(float __x);
-long double erfl(long double __x) __RENAME_LDBL(erf, 3, 21);
-
+__extern_inline__ long double erfl(long double __x) {
+     return __builtin_erfl(__x);
+}
 double erfc(double __x);
 float erfcf(float __x);
-long double erfcl(long double __x) __RENAME_LDBL(erfc, 3, 21);
+__extern_inline__ long double erfcl(long double __x) {
+     return __builtin_erfcl(__x);
+}
 
 double lgamma(double __x);
 float lgammaf(float __x);
-long double lgammal(long double __x) __RENAME_LDBL(lgamma, 3, 21);
-
+__extern_inline__ long double lgammal(long double __x) {
+     return __builtin_lgammal(__x);
+}
 double tgamma(double __x);
-
-#if (defined(__LP64__)) || (defined(__arm__) && __ANDROID_API__ >= 13) || (defined(__mips__) && !defined(__LP64__) && __ANDROID_API__ >= 13) || (defined(__i386__))
-float tgammaf(float __x) __INTRODUCED_IN_ARM(13) __INTRODUCED_IN_MIPS(13) __INTRODUCED_IN_X86(9);
-#endif /* (defined(__LP64__)) || (defined(__arm__) && __ANDROID_API__ >= 13) || (defined(__mips__) && !defined(__LP64__) && __ANDROID_API__ >= 13) || (defined(__i386__)) */
-
-long double tgammal(long double __x) __RENAME_LDBL(tgamma, 3, 21);
+__extern_inline__ float tgammaf(float __x) {
+     return __builtin_tgammaf(__x);
+}
+__extern_inline__ long double tgammal(long double __x) {
+    return __builtin_tgammal(__x);
+}
 
 double ceil(double __x);
 float ceilf(float __x);
-long double ceill(long double __x) __RENAME_LDBL(ceil, 3, 3);
+__extern_inline__ long double ceill(long double __x) {
+    return __builtin_ceill(__x);
+}
 
 double floor(double __x);
 float floorf(float __x);
-long double floorl(long double __x) __RENAME_LDBL(floor, 3, 3);
+__extern_inline__ long double floorl(long double __x) {
+    return __builtin_floorl(__x);
+}
 
 double nearbyint(double __x);
 float nearbyintf(float __x);
-long double nearbyintl(long double __x) __RENAME_LDBL(nearbyint, 3, 21);
+__extern_inline__ long double nearbyintl(long double __x) {
+    return __builtin_nearbyintl(__x);
+}
 
 double rint(double __x);
 float rintf(float __x);
-long double rintl(long double __x) __RENAME_LDBL(rint, 3, 21);
+__extern_inline__ long double rintl(long double __x) {
+    return __builtin_rintl(__x);
+}
 
 long lrint(double __x);
 long lrintf(float __x);
-long lrintl(long double __x) __RENAME_LDBL(lrint, 3, 21);
+__extern_inline__ long long lrintl(long double __x) {
+    return __builtin_lrintl(__x);
+}
 
 long long llrint(double __x);
 long long llrintf(float __x);
-long long llrintl(long double __x) __RENAME_LDBL(llrint, 3, 21);
+__extern_inline__ long long llrintl(long double __x) {
+    return __builtin_llrintl(__x);
+}
 
 double round(double __x);
 float roundf(float __x);
-long double roundl(long double __x) __RENAME_LDBL(roundl, 3, 3);
+__extern_inline__ long double roundl(long double __x) {
+    return __builtin_roundl(__x);
+}
 
 long lround(double __x);
 long lroundf(float __x);
-long lroundl(long double __x) __RENAME_LDBL(lround, 3, 3);
+__extern_inline__ long lroundl(long double __x) {
+    return __builtin_lroundl(__x);
+}
 
 long long llround(double __x);
 long long llroundf(float __x);
-long long llroundl(long double __x) __RENAME_LDBL(llround, 3, 3);
+__extern_inline__ long long llroundl(long double __x) {
+    return __builtin_llroundl(__x);
+}
 
 double trunc(double __x);
 float truncf(float __x);
-long double truncl(long double __x) __RENAME_LDBL(trunc, 3, 3);
+__extern_inline__ long double truncl(long double __x) {
+    return __builtin_truncl(__x);
+}
 
 double fmod(double __x, double __y);
 float fmodf(float __x, float __y);
-long double fmodl(long double __x, long double __y) __RENAME_LDBL(fmod, 3, 21);
+__extern_inline__ long double fmodl(long double __x, long double __y) {
+    return __builtin_fmodl(__x, __y);
+}
 
 double remainder(double __x, double __y);
 float remainderf(float __x, float __y);
-long double remainderl(long double __x, long double __y) __RENAME_LDBL(remainder, 3, 21);
+__extern_inline__ long double remainderl(long double __x, long double __y) {
+    return __builtin_remainderl(__x, __y);
+}
 
 double remquo(double __x, double __y, int* __quotient_bits);
 float remquof(float __x, float __y, int* __quotient_bits);
-long double remquol(long double __x, long double __y, int* __quotient_bits) __RENAME_LDBL(remquo, 3, 21);
+__extern_inline__ long double remquol(long double __x, long double __y, int* __quotient_bits) {
+    return __builtin_remquol(__x, __y, __quotient_bits);
+}
 
 double copysign(double __value, double __sign) __attribute_const__;
 float copysignf(float __value, float __sign) __attribute_const__;
-long double copysignl(long double __value, long double __sign) __RENAME_LDBL(copysign, 3, 3) __attribute_const__;
-
-
-#if (defined(__LP64__)) || (defined(__arm__) && __ANDROID_API__ >= 13) || (defined(__mips__) && !defined(__LP64__) && __ANDROID_API__ >= 13) || (defined(__i386__))
-double nan(const char* __kind) __attribute_const__ __INTRODUCED_IN_ARM(13) __INTRODUCED_IN_MIPS(13) __INTRODUCED_IN_X86(9);
-float nanf(const char* __kind) __attribute_const__ __INTRODUCED_IN_ARM(13) __INTRODUCED_IN_MIPS(13) __INTRODUCED_IN_X86(9);
-#endif /* (defined(__LP64__)) || (defined(__arm__) && __ANDROID_API__ >= 13) || (defined(__mips__) && !defined(__LP64__) && __ANDROID_API__ >= 13) || (defined(__i386__)) */
-
-
-#if __ANDROID_API__ >= 13
-long double nanl(const char* __kind) __RENAME_LDBL(nan, 13, 13) __attribute_const__;
-#endif /* __ANDROID_API__ >= 13 */
-
+__extern_inline__ long double copysignl(long double __value, long double __sign) {
+    return __builtin_copysignl(__value, __sign);
+}
+
+__extern_inline__ double nan(const char* __kind) {
+    return __builtin_nan(__kind);
+}
+__extern_inline__ float nanf(const char* __kind) {
+    return __builtin_nanf(__kind);
+}
+__extern_inline__ long double nanl(const char* __kind) {
+    return __builtin_nanl(__kind);
+}
 
 double nextafter(double __x, double __y);
 float nextafterf(float __x, float __y);
-long double nextafterl(long double __x, long double __y) __RENAME_LDBL(nextafter, 3, 21) __VERSIONER_NO_GUARD;
+__extern_inline__ long double nextafterl(long double __x, long double __y) {
+    return __builtin_nextafterl(__x, __y);
+}
 
-double nexttoward(double __x, long double __y) __INTRODUCED_IN(18) __VERSIONER_NO_GUARD;
+__extern_inline__ double nexttoward(double __x, long double __y) {
+    return __builtin_nexttoward(__x, __y);
+}
 float nexttowardf(float __x, long double __y);
-long double nexttowardl(long double __x, long double __y) __RENAME_LDBL(nexttoward, 18, 18) __VERSIONER_NO_GUARD;
+__extern_inline__ long double nexttowardl(long double __x, long double __y) {
+    return __builtin_nexttowardl(__x, __y);
+}
 
 double fdim(double __x, double __y);
 float fdimf(float __x, float __y);
-long double fdiml(long double __x, long double __y) __RENAME_LDBL(fdim, 3, 3);
+__extern_inline__ long double fdiml(long double __x, long double __y) {
+    return __builtin_fdiml(__x, __y);
+}
 
 double fmax(double __x, double __y) __attribute_const__;
 float fmaxf(float __x, float __y) __attribute_const__;
-long double fmaxl(long double __x, long double __y) __RENAME_LDBL(fmax, 3, 3) __attribute_const__;
+__extern_inline__ long double fmaxl(long double __x, long double __y) {
+    return __builtin_fmaxl(__x, __y);
+}
 
 double fmin(double __x, double __y) __attribute_const__;
 float fminf(float __x, float __y) __attribute_const__;
-long double fminl(long double __x, long double __y) __RENAME_LDBL(fmin, 3, 3) __attribute_const__;
+__extern_inline__ long double fminl(long double __x, long double __y) {
+    return __builtin_fminl(__x, __y);
+}
 
 double fma(double __x, double __y, double __z);
 float fmaf(float __x, float __y, float __z);
-long double fmal(long double __x, long double __y, long double __z) __RENAME_LDBL(fma, 3, 21) __VERSIONER_NO_GUARD;
+__extern_inline__ long double fmal(long double __x, long double __y, long double __z) {
+    return __builtin_fmal(__x, __y, __z);
+}
 
 #define isgreater(x, y) __builtin_isgreater((x), (y))
 #define isgreaterequal(x, y) __builtin_isgreaterequal((x), (y))
@@ -339,9 +449,9 @@ long double fmal(long double __x, long double __y, long double __z) __RENAME_LDB
  * included by a lot of other standard headers) and ::isnan.
  */
 
-#if __ANDROID_API__ >= 21
-int (isinf)(double __x) __attribute_const__ __INTRODUCED_IN(21);
-#endif /* __ANDROID_API__ >= 21 */
+__extern_inline__ int isinf(double __x) {
+    return __builtin_isinf(__x);
+}
 
 int (isnan)(double __x) __attribute_const__;
 
@@ -390,14 +500,13 @@ double gamma_r(double __x, int* __sign);
 double lgamma_r(double __x, int* __sign);
 double significand(double __x);
 
-#if __ANDROID_API__ >= 23
-long double lgammal_r(long double __x, int* __sign) __INTRODUCED_IN(23);
-#endif /* __ANDROID_API__ >= 23 */
-
+__extern_inline__ long double lgammal_r(long double __x, int* __sign) {
+    return __builtin_lgammal_r(__x, __sign);
+}
 
-#if __ANDROID_API__ >= 21
-long double significandl(long double __x) __INTRODUCED_IN(21);
-#endif /* __ANDROID_API__ >= 21 */
+__extern_inline__ long double significandl(long double __x) {
+    return __builtin_significandl(__x);
+}
 
 float dremf(float __x, float __y);
 int finitef(float __x) __attribute_const__;
diff --git a/string.h b/string.h
index 684e7dc..ad3019d 100644
--- a/string.h
+++ b/string.h
@@ -162,6 +162,13 @@ size_t strxfrm_l(char* __dst, const char* __src, size_t __n, locale_t __l) __INT
 // Implemented as static inlines before 21.
 #endif
 
+__extern_inline__ int ffsl(long int __x) {
+    return __builtin_ffsl(__x);
+}
+__extern_inline__ int ffsll(long long int __x) {
+    return __builtin_ffsll(__x);
+}
+
 #if defined(__USE_GNU) && !defined(basename)
 /*
  * glibc has a basename in <string.h> that's different to the POSIX one in <libgen.h>.
diff --git a/sys/cdefs.h b/sys/cdefs.h
index 3656733..69f2ce0 100644
--- a/sys/cdefs.h
+++ b/sys/cdefs.h
@@ -380,4 +380,7 @@ int __size_mul_overflow(__SIZE_TYPE__ a, __SIZE_TYPE__ b, __SIZE_TYPE__ *result)
 #define __unsafe_check_mul_overflow(x, y) ((__SIZE_TYPE__)-1 / (x) < (y))
 #endif
 
+#define __extern_always_inline__ extern __always_inline __attribute__((__gnu_inline__, __artificial__))
+#define __extern_inline__ extern __inline__ __attribute__((__gnu_inline__))
+
 #endif /* !_SYS_CDEFS_H_ */
diff --git a/sys/mman.h b/sys/mman.h
index 5cc0775..cdfcc6d 100644
--- a/sys/mman.h
+++ b/sys/mman.h
@@ -48,20 +48,8 @@ __BEGIN_DECLS
 /*
  * mmap64 wasn't really around until L, but we added an inline for it since it
  * allows a lot more code to compile with _FILE_OFFSET_BITS=64.
- *
- * GCC removes the static inline unless it is explicitly used. We can get around
- * this with __attribute__((used)), but that needlessly adds a definition of
- * mmap64 to every translation unit that includes this header. Instead, just
- * preserve the old behavior for GCC and emit a useful diagnostic.
  */
-void* mmap(void* __addr, size_t __size, int __prot, int __flags, int __fd, off_t __offset)
-#if !defined(__clang__) && __ANDROID_API__ < __ANDROID_API_L__
-    __attribute__((error("mmap is not available with _FILE_OFFSET_BITS=64 when using GCC until "
-                         "android-21. Either raise your minSdkVersion, disable "
-                         "_FILE_OFFSET_BITS=64, or switch to Clang.")));
-#else
-    __RENAME(mmap64);
-#endif  /* defined(__clang__) */
+void* mmap(void* __addr, size_t __size, int __prot, int __flags, int __fd, off_t __offset) __RENAME(mmap64);
 #else
 void* mmap(void* __addr, size_t __size, int __prot, int __flags, int __fd, off_t __offset);
 #endif  /* defined(__USE_FILE_OFFSET64) */
diff --git a/sys/types.h b/sys/types.h
index 26ad6a5..56b0223 100644
--- a/sys/types.h
+++ b/sys/types.h
@@ -32,6 +32,7 @@
 #include <stddef.h>
 #include <stdint.h>
 #include <sys/cdefs.h>
+#include <sys/endian.h>
 
 #include <linux/types.h>
 #include <linux/posix_types.h>
-- 
2.49.0

